<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>howtographql on Hackrole's Blog</title><link>https://hackrole.github.io/categories/howtographql/</link><description>Recent content in howtographql on Hackrole's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2020 &lt;a href="https://www.wangchucheng.com/">C. Wang&lt;/a> and &lt;a href="https://www.ruiqima.com/">R. Ma&lt;/a></copyright><lastBuildDate>Sat, 05 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackrole.github.io/categories/howtographql/index.xml" rel="self" type="application/rss+xml"/><item><title>core-concept</title><link>https://hackrole.github.io/post/howto-graphql-core-concept/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/howto-graphql-core-concept/</guid><description>rest vs graphql good things from rest stateless API, which make web-scalable and easy-manage resource-oriented programming and structured accessto resources, which make many goods, such as cacheable, retriable. the bad things with rest `1+N` problem: fetch list api, fetch every detail api to get more message.
overfetching(fetch too much data which was not requried) underfetching(not-enough data from api, which make it need multi request to get the data). too flexible, may things this like dynamic(rest) vs static(graphql).</description></item><item><title>python-graphql-server note</title><link>https://hackrole.github.io/post/python-howto-graphql-note/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/python-howto-graphql-note/</guid><description>schema-driven development define your types and the appropriate queries and mutations for them. implemetns functions called resolvers to handle these types and their fields. as new requirements arrive, go back to step 1 update the schema. about relay a mechanism for refetching an object a description of how to page through connections structure around mutation to make them prediatable</description></item></channel></rss>