<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Hackrole's Blog</title><link>https://hackrole.github.io/categories/rust/</link><description>Recent content in Rust on Hackrole's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2020 &lt;a href="https://www.wangchucheng.com/">C. Wang&lt;/a> and &lt;a href="https://www.ruiqima.com/">R. Ma&lt;/a></copyright><lastBuildDate>Mon, 09 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackrole.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>16 无畏并发 fearless concurrency</title><link>https://hackrole.github.io/post/learn-rust-note-16-concurrency/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/learn-rust-note-16-concurrency/</guid><description>concurrent-programming: programs can run in independent with each other. parallel programming: program can run at same time.
as a low-level language, rust need less abstraction and more control.
use thread process vs thread
programs:
Race conditions: data-race. resource-race. DeakLock difficult concurrent bug. os-thread vs green-thread: 1:1 vs M:N
/// thread examples /// when the main-thread exit, the fork-thread will exit too. /// just like python thread.deamon flag. use std::thread; use std::time::Duration; fn main() { thread::spawn(|| { for i in 1.</description></item><item><title>17 rust OOP</title><link>https://hackrole.github.io/posts/learn-rust-17-rust-oop/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/posts/learn-rust-17-rust-oop/</guid><description>rust can bind data with methods rust can use pub/private to abstract inner implement. rust not support exntends. you should consider use combination more. extend has two more usage-point.
reuse pub method from parent-class or ability to rewrite it on willing. Rust use Trait to do this. polymorphism. Parent-Ref can ref any-SubType-instances, and method-call is eval at runtime.in Rust, you may use Generics-Type and Trait-Bounds todo this. \`bounded parametric polymorphism\`. TODOTrait-object used for instances with different types Generic and Trait-Bound can only replace one type.</description></item><item><title>rust advance feature</title><link>https://hackrole.github.io/post/learn-rust-19-unsafe-rust/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/learn-rust-19-unsafe-rust/</guid><description>unsafe-rust advance-trait trait-ref-type 与trait相关的关联类型 default type param 默认参数类型 fully qualified syntax 完全限定语法 supertraits 超父类 newtype模式 advance-type more about new-type pattern type alias 类型别名 never type dymatic-size type 动态大小类型 advance function and closure function point 函数指针 return closure 返回闭包 macro 宏 unsafe-rust the-addional-super power of unsafe
解引用裸指针 调用不安全的函数或方法 访问或修改可变静态变量 实现不安全的trait 访问union字段 the owner-check is still on
unref-raw-point ignore owner-rule, allow mut and immute ref.</description></item><item><title>rust advance feature</title><link>https://hackrole.github.io/posts/learn-rust-19-unsafe-rust/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/posts/learn-rust-19-unsafe-rust/</guid><description>unsafe-rust advance-trait trait-ref-type 与trait相关的关联类型 default type param 默认参数类型 fully qualified syntax 完全限定语法 supertraits 超父类 newtype模式 advance-type more about new-type pattern type alias 类型别名 never type dymatic-size type 动态大小类型 advance function and closure function point 函数指针 return closure 返回闭包 macro 宏 unsafe-rust the-addional-super power of unsafe
解引用裸指针 调用不安全的函数或方法 访问或修改可变静态变量 实现不安全的trait 访问union字段 the owner-check is still on
unref-raw-point ignore owner-rule, allow mut and immute ref.</description></item><item><title>20 build multiple-threading webserver</title><link>https://hackrole.github.io/post/learn-rust-20-threading-webserver/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/learn-rust-20-threading-webserver/</guid><description/></item><item><title>18 rust pattern</title><link>https://hackrole.github.io/post/learn-rust-18-match-pattern/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/learn-rust-18-match-pattern/</guid><description>包括的内容:
字面量 literal 解构数组，枚举，结构提，元组等 变量 通配符 占位符 rust match rust match is exhaustive, all situation must be consided
_ match all, and not bind to variable, use to ignore
if let use can only care abouot one situation
fn main() { let favorite_color: Option&amp;lt;&amp;amp;str&amp;gt; = None; let is_tuesday = false; let age: Result&amp;lt;u8, _&amp;gt; = &amp;quot;34&amp;quot;.parse(); if let Some(color) = favorite_color { println!(&amp;quot;Using your favorite color, {}, as the backgourd&amp;quot;, favorite_color); }else if is_tuesday { println!</description></item></channel></rss>