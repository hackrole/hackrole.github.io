<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on hackrole&#39;s note</title>
    <link>https://hackrole.github.io/category/tools/</link>
    <description>Recent content in tools on hackrole&#39;s note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Aug 2018 10:23:01 +0000</lastBuildDate>
    
	<atom:link href="https://hackrole.github.io/category/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>minikube tips</title>
      <link>https://hackrole.github.io/post/k8s_minikube_tips/</link>
      <pubDate>Fri, 03 Aug 2018 10:23:01 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/k8s_minikube_tips/</guid>
      <description> minikube搭建issuses 1) 启动失败
最新的28.2版本有bug,使用25.2版本
同时25.2版本应该使用kvm,kvm2启动会失败
注意要rm -rf ~/.minikube删除旧文件
国内须开启代理,代理不能使用127.0.0.1, 不然docker pull会失败. 须设置no_proxy=192.168.99.0/24
.. code-block:: bash
https_proxy=192.168.88.242:8118 minikube start --docker-env \ https_proxy=192.168.88.242:8118 --docker-env \ http_proxy=192.168.88.242:8118 --docker-env \ no_proxy=192.168.99.0/24 --vm-driver kvm  启动后验证是否成功:
.. code-block:: bash
minikube status kubectl cluster-info kubectl get pod --all-namespaces=true minikube dashboard  </description>
    </item>
    
    <item>
      <title>vim中使用nerdcomment来注释python代码tips</title>
      <link>https://hackrole.github.io/post/vim_use_nerdcomment_with_python/</link>
      <pubDate>Wed, 03 Feb 2016 11:06:47 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/vim_use_nerdcomment_with_python/</guid>
      <description>intro nerdcomment是一个vim插件，提供多种文件类型的代码注释功能. 同时设置了写常用的快捷按键。
项目地址: https://github.com/scrooloose/nerdcommenter.git
常用的按键有:
.. csv-table:: nerdcommnet按键 :header: keymap, 描述, key-mode :class: table :name: csv-table
&amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;, 切换代码注释状态, v &amp;lt;leader&amp;gt;cc, 注释代码, v &amp;lt;leader&amp;gt;cl, 注释代码.但是保持左边对齐, v &amp;lt;leader&amp;gt;cb, 同上both-side.暂时没看出区别, v &amp;lt;leader&amp;gt;ca, 切换alt注释符号, n &amp;lt;leader&amp;gt;cA, 在行尾添加注释, n &amp;lt;leader&amp;gt;c$, 从当前cursor注释到行尾, n  配合python使用tips 添加空格
 设置 `let g:NERDSpaceDelims = 1`. 之后注释的时候会在#后加入一个空格，这样代码做pep8的时候就不会报警告了. 如图. 设置前: .. image:: /static/vim-nerdcomment/bad-delims.jpg :alt: bad-pep8 设置后: .. image:: /static/vim-nerdcomment/good-delims.jpg :alt: good-pep8 注释对齐  使用 &amp;lt;leader&amp;gt;cl 取代 &amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt;.
我一般也是用 &amp;lt;leader&amp;gt;c&amp;lt;space&amp;gt; 。但是注释出来的效果不是很好 看了好久文档总算是找个了解决办法.</description>
    </item>
    
    <item>
      <title>vim中使用riv插件输出表格</title>
      <link>https://hackrole.github.io/post/write_rst_table_in_vim_with_riv/</link>
      <pubDate>Tue, 02 Feb 2016 16:29:59 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/write_rst_table_in_vim_with_riv/</guid>
      <description>使用 严格来说, 是使用rst里支持的directives来写表格.
想对于默认的表格写起来方便很多，而且不用烦心对齐的问题.
第一种方式: csv-table
.. code-block:: rst
.. csv-table:: options整理 :header: &amp;ldquo;键名&amp;rdquo;, &amp;ldquo;描述&amp;rdquo;, &amp;ldquo;默认值&amp;rdquo;, &amp;ldquo;建议值&amp;rdquo; :class: table :name: csv-table
 quiet, &amp;quot;是否安静模式&amp;quot;, 0, 1 quiet, &amp;quot;是否安静模式&amp;quot;, 0, 1 quiet, &amp;quot;是否安静模式&amp;quot;, 0, 1 quiet, &amp;quot;是否安静模式&amp;quot;, 0, 1 quiet, &amp;quot;是否安静模式&amp;quot;, 0, 1  第二种方式: list-table
.. code-block:: rst
.. list-table:: Frozen Delights! :widths: 15 10 30 :class: table :name: list-table :header-rows: 1 * - Treat - Quantity - Description * - Albatross - 2.</description>
    </item>
    
    <item>
      <title>elisp keymap相关</title>
      <link>https://hackrole.github.io/post/elisp_keymap/</link>
      <pubDate>Fri, 03 Jan 2014 14:58:24 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/elisp_keymap/</guid>
      <description>elisp按键序列概念 elisp按键在elisp中有两种表达方式:
1&amp;gt; 字符串 &amp;ldquo;\C-x1&amp;rdquo;
2&amp;gt; 列表vector [?\C-x ?1]
函数(kbd keseq-string)返回字符串对应的按键序列(字符串或列表形式)
功能键用 &amp;lt;&amp;gt;表示,   等
keymap基本概念 keymap是一个中lisp内的数据结构，用于绑定多个按键序列到对应的command上
按键序列可以分为两种
1&amp;gt; prefix key 前缀键,如 C-x
2&amp;gt; complete key 完整的按键,如 x, C-k, C-x C-q
定义一个complete key前，需要定义所有需要的prefix key.
一般都会有多个keymap处于激活状态，分类如下 1&amp;gt; global keymap (shared by all buffers)
2&amp;gt; local keymap (通常由major mode设置)
3&amp;gt; zero or many minor keymap(通常有minor mode提供)
local keymap会覆盖global keymap, minor keymap会覆盖local keymap和global-keymap
create keymap and keymap format keymap format
 **TODO** 函数(keymapp symbal)用于判断指定symbal是否为keymap create keymap  | function | desc | others | | (make-sparse-keymap &amp;amp;optional prompt | create and return a new keymap with no entries | the usually keymap you need | | (make-keymap &amp;amp;optional prompt) | create and return a new keymap with char-tables | use this if you want bind a lots of keys | | (copy-keymap keymap) | return a copy of keymap, recursive copy sub keymap | recursive copy fails on function keymap |</description>
    </item>
    
    <item>
      <title>elisp变量相关</title>
      <link>https://hackrole.github.io/post/elisp_variable/</link>
      <pubDate>Thu, 02 Jan 2014 15:02:21 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/elisp_variable/</guid>
      <description>全局变量 setq
set
常量 t
nil
keyword(:)
(keywordp) (defconst)
局部变量 let let*
(shodow/setq)
buffer local/terminal local
变量命名规范 -hook -function -functions -form -forms -predicate -flag -program -command -switches</description>
    </item>
    
    <item>
      <title>elisp buffer处理相关</title>
      <link>https://hackrole.github.io/post/elisp_buffer/</link>
      <pubDate>Thu, 02 Jan 2014 14:55:08 +0000</pubDate>
      
      <guid>https://hackrole.github.io/post/elisp_buffer/</guid>
      <description> buffer基本概念 buffer是一个elisp对象，包含一些必要的属性, 部分属性可以直接通过变量访问,部分属性要通过函数才能访问
buffer一般会关联一个打开的文件，也可不关联
buffer都有一个唯一name属性
buffer-local变量使得可以对不同buffer保存不同的状态等
bufferp函数测试symbal是否为buffer
buffer基本属性 the current buffer buffer name buffer file name buffer modify read-only buffer buffer list buffer操作函数 </description>
    </item>
    
  </channel>
</rss>