<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Hackrole's Blog</title><link>https://hackrole.github.io/series/rust/</link><description>Recent content in rust on Hackrole's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2020 &lt;a href="https://www.wangchucheng.com/">C. Wang&lt;/a> and &lt;a href="https://www.ruiqima.com/">R. Ma&lt;/a></copyright><lastBuildDate>Wed, 04 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hackrole.github.io/series/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>16 无畏并发 fearless concurrency</title><link>https://hackrole.github.io/post/learn-rust-note-16-concurrency/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/post/learn-rust-note-16-concurrency/</guid><description>concurrent-programming: programs can run in independent with each other. parallel programming: program can run at same time.
as a low-level language, rust need less abstraction and more control.
use thread process vs thread
programs:
Race conditions: data-race. resource-race. DeakLock difficult concurrent bug. os-thread vs green-thread: 1:1 vs M:N
/// thread examples /// when the main-thread exit, the fork-thread will exit too. /// just like python thread.deamon flag. use std::thread; use std::time::Duration; fn main() { thread::spawn(|| { for i in 1.</description></item><item><title>16 无畏并发 fearless concurrency</title><link>https://hackrole.github.io/posts/learn-rust-note-16-concurrency/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://hackrole.github.io/posts/learn-rust-note-16-concurrency/</guid><description>concurrent-programming: programs can run in independent with each other. parallel programming: program can run at same time.
as a low-level language, rust need less abstraction and more control.
use thread process vs thread
programs:
Race conditions: data-race. resource-race. DeakLock difficult concurrent bug. os-thread vs green-thread: 1:1 vs M:N
/// thread examples /// when the main-thread exit, the fork-thread will exit too. /// just like python thread.deamon flag. use std::thread; use std::time::Duration; fn main() { thread::spawn(|| { for i in 1.</description></item></channel></rss>